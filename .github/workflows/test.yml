name: test

env:
  DOWNLOAD_CACHE_VERSION: 8

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-22.04]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt update
        sudo apt-get install -y tree clang clang-format ccache gcc-11 g++-11 freeglut3-dev g++ libasound2-dev libcurl4-openssl-dev libfreetype6-dev libjack-jackd2-dev libx11-dev libxcomposite-dev libxcursor-dev libxinerama-dev libxrandr-dev mesa-common-dev ladspa-sdk webkit2gtk-4.0 libgtk-3-dev xvfb ninja-build libwebkit2gtk-4.1-dev
    - name: Check format
      run: |
        clang-format --dry-run --Werror src/**/*.cc include/**/*.hh
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Make cache dir
      run: mkdir /home/runner/.ccache
    - name: Restore cache
      id: restore-cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}-${{ env.DOWNLOAD_CACHE_VERSION }}
        path: /home/runner/.ccache
        # restore-keys: |
        #   ${{ runner.os }}-ccache-
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -D CMAKE_C_COMPILER_LAUNCHER=ccache
        -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
        -S ${{ github.workspace }}
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel $(nproc)
    - name: Print ccache stats
      run: |
        ccache -s
        ccache -p
    - name: Always save cache
      if: always() # TODO && steps.restore-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        # key: ${{ steps.restore-cache.outputs.cache-primary-key }}
        key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}-${{ env.DOWNLOAD_CACHE_VERSION }}
        path: /home/runner/.ccache
    - name: Run tests
      id: test
      continue-on-error: true  # Allows next steps to run even if this fails
      run: |
        set -o pipefail
        xvfb-run -a --server-args="-screen 0 1280x1024x24" ./build/BoxTests_artefacts/Release/BoxTests 2>&1 | tee test_log.txt
    - name: Run "Fake Main" test
      id: fake_main_test
      continue-on-error: true  # Allows next steps to run even if this fails
      run: |
        set -o pipefail
        xvfb-run -a --server-args="-screen 0 1280x1024x24" ./build/FakeMain_artefacts/Release/FakeMain 2>&1 | tee fake_main_test_log.txt

    - name: Upload test log
      if: always()  # This ensures it uploads even if the test fails
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: "*test_log.txt"
    - name: Check test result
      if: always()
      run: |
        if [ "${{ steps.test.outcome }}" != "success" ]; then
          echo "Tests failed"
          exit 1
        fi
